<template>
    <div class="app-container">

        <!-- 查询和其他操作 -->
        <div class="filter-container">
            <!--<el-button v-permission="['POST /admin/category/create']" class="filter-item" type="primary" icon="el-icon-edit" @click="handleCreate">添加</el-button>-->
            <el-button class="filter-item" type="primary" icon="el-icon-edit" @click="handleCreate">添加</el-button>
        </div>

        <!-- 查询结果 -->
        <el-table v-loading="listLoading" :data="dataList" element-loading-text="正在查询中。。。" border fit highlight-current-row row-key="id">

            #foreach($column in $columns)
            <el-table-column align="center" label="${column.comments}" prop="${column.attrname}"/>
            #end

            <el-table-column align="center" label="操作" width="200" class-name="small-padding fixed-width">
                <template slot-scope="scope">
                    <!--<el-button v-permission="['POST /admin/category/update']" type="primary" size="mini" @click="handleUpdate(scope.row)">编辑</el-button>
                    <el-button v-permission="['POST /admin/category/delete']" type="danger" size="mini" @click="handleDelete(scope.row)">删除</el-button>-->
                    <el-button type="primary" size="mini" @click="handleUpdate(scope.row)">编辑</el-button>
                    <el-button type="danger" size="mini" @click="handleDelete(scope.row)">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <pagination v-show="total>0" :total="total" :page.sync="listQuery.pageNum" :limit.sync="listQuery.pageSize" @pagination="getDataList" />
        <!-- 添加或修改对话框 -->
        <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
            <el-form ref="dataForm" :rules="rules" :model="dataForm" status-icon label-position="left" label-width="100px" style="width: 400px; margin-left:50px;">
                #foreach($column in $columns)
                    <el-form-item label="${column.comments}" prop="${column.attrname}">
                        <el-input v-model="dataForm.${column.attrname}"/>
                    </el-form-item>
                #end
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible = false">取消</el-button>
                <el-button v-if="dialogStatus=='create'" type="primary" @click="createData">确定</el-button>
                <el-button v-else type="primary" @click="updateData">确定</el-button>
            </div>
        </el-dialog>

    </div>
</template>

<style scoped>
    .filter-item{
        margin-left: 100px;
    }
    .avatar-uploader .el-upload {
        border: 1px dashed #d9d9d9;
        border-radius: 6px;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }
    .avatar-uploader .el-upload:hover {
        border-color: #20a0ff;
    }
    .avatar-uploader-icon {
        font-size: 28px;
        color: #8c939d;
        width: 120px;
        height: 120px;
        line-height: 120px;
        text-align: center;
    }
    .avatar {
        width: 145px;
        height: 145px;
        display: block;
    }
</style>

<script>
import { list${className}, create${className}, update${className}, delete${className} } from '@/api/${classname}'
import Pagination from '@/components/Pagination'
import { getToken } from '@/utils/auth'

export default {
  name: '${className}',
  components: { Pagination },
  data() {
    return {
      listLoading: true,
      dataList: [],
      total: 0,
      dataForm: {
      #foreach($column in $columns)
      #if($column.columnName == $pk.columnName)
        ${column.attrname}: undefined,
      #end
      #if(($column.attrType == 'Integer' || $column.attrType == 'Long') && $column.columnName != $pk.columnName)
        ${column.attrname}: 0,
      #end
      #if($column.attrType == 'String')
        ${column.attrname}: '',
      #end
      #end
      },
      listQuery: {
        pageNum: 1,
        pageSize: 10,
        sort: 'create_time desc'
      },
      dialogFormVisible: false,
      dialogStatus: '',
      textMap: {
        update: '编辑',
        create: '创建'
      },
      rules: {
      #foreach($column in $columns)
      #if($column.attrType == 'String')
        ${column.attrname}: [{ required: true, message: '${column.comments}不能为空', trigger: 'blur' }],
      #end
      #end
      }
    }
  },
  computed: {
    headers() {
      return {
        'X-Litemall-Admin-Token': getToken()
      }
    }
  },
  created() {
    this.getDataList()
  },
  methods: {
    getDataList() {
      this.listLoading = true
      list${className}(this.listQuery).then(response => {
        this.dataList = response.data.list
        this.total = response.data.total
        this.listLoading = false
      }).catch(() => {
        this.dataList = []
        this.total = 0
        this.listLoading = false
      })
    },
    resetForm() {
        this.dataForm = {
        #foreach($column in $columns)
        #if($column.columnName == $pk.columnName)
          ${column.attrname}: undefined,
        #end
        #if(($column.attrType == 'Integer' || $column.attrType == 'Long') && $column.columnName != $pk.columnName)
          ${column.attrname}: 0,
        #end
        #if($column.attrType == 'String')
          ${column.attrname}: '',
        #end
        #end
        }
    },
    handleCreate() {
      this.resetForm()
      this.dialogStatus = 'create'
      this.dialogFormVisible = true
        #[[this.$nextTick(() => {]]#
            #[[this.$refs['dataForm'].clearValidate()]]#
      })
    },
    createData() {
        #[[this.$refs['dataForm'].validate(valid => {]]#
        if (valid) {
          create${className}(this.dataForm)
          .then(response => {
          this.dialogFormVisible = false
              #[[this.$notify.success({]]#
            title: '成功',
            message: '创建成功'
            })
          })
          .catch(response => {
          console.log(response)
              #[[this.$notify.error({]]#
            title: '失败',
            message: response.data.msg
            })
          })
        }
      })
    },
    handleUpdate(row) {
      this.dataForm = Object.assign({}, row)
      this.dialogStatus = 'update'
      this.dialogFormVisible = true
        #[[this.$nextTick(() => {]]#
            #[[this.$refs['dataForm'].clearValidate()]]#
      })
    },
    updateData() {
        #[[this.$refs['dataForm'].validate(valid => {]]#
        if (valid) {
          update${className}(this.dataForm)
          .then(() => {
            for (const v of this.dataList) {
              if (v.id === this.dataForm.id) {
                const index = this.dataList.indexOf(v)
                this.dataList.splice(index, 1, this.dataForm)
                break
              }
            }
            this.dialogFormVisible = false
              #[[this.$notify.success({]]#
              title: '成功',
              message: '更新成功'
            })
          })
          .catch(response => {
              #[[this.$notify.error({]]#
              title: '失败',
              message: response.data.msg
            })
          })
        }
      })
    },
    handleDelete(row) {
      delete${className}(row)
      .then(response => {
          #[[this.$notify.success({]]#
          title: '成功',
          message: '删除成功'
        })
        const index = this.dataList.indexOf(row)
        this.dataList.splice(index, 1)
      })
      .catch(response => {
          #[[this.$notify.error({]]#
          title: '失败',
          message: response.data.msg
        })
      })
    }
  }
}
</script>
